<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--  拦截规则配置  -->
    <security:http auto-config="true" use-expressions="false">
        <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>
    </security:http>
    <!--  认证管理器  -->
    <security:authentication-manager>
        <!--  认证信息提供者，认证信息的来源
              提供登陆用户信息  用户名、密码、权限集合
              user-service-ref 指向spring容器中一个bean对象, 实现这个UserDetailsService的对象, 提供用户的名称、密码、权限集合

              一旦配置了user-service-ref，就不要配置security:user-service
        -->
        <security:authentication-provider>
            <!--   登陆用户信息由我们自己来提供         -->
            <security:user-service>
                <!--   security:user 硬编码一个用户对象在内存中，就不需要去查询数据库了
                       将来应该使用从数据库查询
                       name: 登陆的用户名  password:登陆的密码
                       authorities: 指定的权限(既可以是角色名也可以权限名) authorities与上面access一致才能访问

                       {noop}使用的是明文，no operation 不要对密码做处理
                 -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>