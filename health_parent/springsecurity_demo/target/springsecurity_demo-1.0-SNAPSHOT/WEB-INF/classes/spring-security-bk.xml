<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.yt"/>
    <mvc:annotation-driven/>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!-- 【注意】在这个配置文件里，所有的路径必须是以/开头  -->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>

    <!--  拦截规则配置  -->
    <security:http auto-config="true" use-expressions="true">
        <security:form-login
            login-page="/login.html"
            username-parameter="username"
            password-parameter="password"
            login-processing-url="/login.do"
            default-target-url="/index.html"
            always-use-default-target="true"
            authentication-failure-url="/fail.html"/>

       <!-- <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>-->
        <security:intercept-url pattern="/a.html" access="isAuthenticated()"/>
        <!--可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />
        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html" access="hasRole('ADMIN')"/>

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面,没有赋予abc的角色名，所以进不去d页面-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ROLE_ABC')" />


        <!--关闭跨域访问控制-->
        <security:csrf disabled="true"/>

        <!--退出登录-->
        <!--
                退出登陆的配置
                invalidate-session: 让session失效
                logout-url: 退出登陆的url
                logout-success-url: 退出成功后的跳转
         -->
        <security:logout logout-url="/logout.do" invalidate-session="true" logout-success-url="/login.html"/>
    </security:http>



    <!--  认证管理器  -->
    <security:authentication-manager>
        <!--  认证信息提供者，认证信息的来源
              提供登陆用户信息  用户名、密码、权限集合
              user-service-ref 指向spring容器中一个bean对象, 实现这个UserDetailsService的对象, 提供用户的名称、密码、权限集合

              一旦配置了user-service-ref，就不要配置security:user-service
        -->
        <security:authentication-provider user-service-ref="userService">
            <!--&lt;!&ndash;   登陆用户信息由我们自己来提供         &ndash;&gt;-->
            <!--<security:user-service>-->
                <!--&lt;!&ndash;   security:user 硬编码一个用户对象在内存中，就不需要去查询数据库了-->
                       <!--将来应该使用从数据库查询-->
                       <!--name: 登陆的用户名  password:登陆的密码-->
                       <!--authorities: 指定的权限(既可以是角色名也可以权限名) authorities与上面access一致才能访问-->

                       <!--{noop}使用的是明文，no operation 不要对密码做处理-->
                 <!--&ndash;&gt;-->
                <!--<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>-->
            <!--</security:user-service>-->

            <!--指定密码加密策略-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置密码加密对象-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean id="userService" class="com.yt.security.UserService"/>


</beans>